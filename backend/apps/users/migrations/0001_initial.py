# Generated by Django 5.2.4 on 2025-07-20 20:10

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import apps.users.managers

import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False)),
                ('subscription_updates_news', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=30, unique=True, verbose_name='Enter your email')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
                'ordering': ('id',),
            },
            managers=[
                ('objects', apps.users.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfileModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=25, validators=[django.core.validators.RegexValidator('^(?=.{2,25}$)[A-ZА-ЯЇІЄҐ][a-zа-яїієґ]*(?:-[A-ZА-ЯЇІЄҐ][a-zа-яїієґ]*)?$', 'Must start with a capital letter and contain only the letters')])),
                ('last_name', models.CharField(max_length=25, validators=[django.core.validators.RegexValidator('^(?=.{2,25}$)[A-ZА-ЯЇІЄҐ][a-zа-яїієґ]*(?:-[A-ZА-ЯЇІЄҐ][a-zа-яїієґ]*)?$', 'Must start with a capital letter and contain only the letters')])),
                ('company_name', models.CharField(blank=True, max_length=25, null=True)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('state', models.CharField(blank=True, max_length=25, null=True)),
                ('region', models.CharField(blank=True, max_length=25, null=True)),
                ('street_name', models.TextField(blank=True, max_length=30, null=True)),
                ('apartment_number', models.TextField(blank=True, max_length=30, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^(\\d{5}(-\\d{4})?|[A-Z]\\d[A-Z][ -]?\\d[A-Z]\\d|[A-Z]{1,2}\\d[A-Z\\d]?\\s?\\d[A-Z]{2})$', 'Zip code format must be as follows: 12345, 12345-6789, K1A 0B1, SW1A 1AA, 75008, 01001')])),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator('^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$', 'The number format must be as follows: +919367788755, 8989829304, +16308520397, 786-307-3615')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profile',
                'ordering': ('id',),
            },
        ),
    ]
